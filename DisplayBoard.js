// Generated by CoffeeScript 1.10.0
var DisplayBoard,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DisplayBoard = (function() {
  function DisplayBoard(dragCallback, clickCallback, resizeHandler, basePath, selectorForPage) {
    this.dragCallback = dragCallback;
    this.clickCallback = clickCallback;
    this.resizeHandler = resizeHandler;
    this.basePath = basePath;
    this.selectorForPage = selectorForPage;
    this.onCardClick = bind(this.onCardClick, this);
    this.onMouseup = bind(this.onMouseup, this);
    this.onMousedown = bind(this.onMousedown, this);
    this.onMousemove = bind(this.onMousemove, this);
    this.registerListeners();
    this.USE_DRAG_AND_DROP = false;
    this.rainbow = [];
    this.arrowBaseIdx = 0;
    this.playingCards = new PlayingCards(false, false);
  }

  DisplayBoard.prototype.createArrowColours = function(numColours) {
    var i, j, ref, results;
    results = [];
    for (i = j = 0, ref = numColours; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      results.push(this.rainbow.push("hsl(" + (i * 360 / numColours) + ",100%,50%)"));
    }
    return results;
  };

  DisplayBoard.prototype.showGameState = function(gameBoard) {
    var cardFileName, cardHeight, cardId, cardRank, cardWidth, colIdx, displayHeight, displayWidth, j, k, ref, ref1, rowIdx;
    displayWidth = jQuery(this.selectorForPage).width() - 20;
    displayHeight = jQuery(this.selectorForPage).height();
    cardWidth = displayWidth / gameBoard.numCols;
    cardHeight = cardWidth * 1.545;
    jQuery('.game-board').html("");
    for (rowIdx = j = 0, ref = gameBoard.numRows - 1; 0 <= ref ? j <= ref : j >= ref; rowIdx = 0 <= ref ? ++j : --j) {
      jQuery('.game-board').append("<div class='row' id='row" + rowIdx + "'></div>");
      for (colIdx = k = 0, ref1 = gameBoard.numCols - 1; 0 <= ref1 ? k <= ref1 : k >= ref1; colIdx = 0 <= ref1 ? ++k : --k) {
        cardId = gameBoard.getCardId(rowIdx, colIdx);
        cardRank = this.playingCards.getCardRank(cardId);
        if (cardRank === this.playingCards.AceId) {
          cardFileName = "cards/card_empty.png";
        } else {
          cardFileName = this.basePath + "cards/" + gameBoard.getCardFileName(rowIdx, colIdx);
        }
        jQuery("#row" + rowIdx).append("<img id='cardid" + cardId + "' class='card' width='" + cardWidth + "px' height='" + cardHeight + "px' src='" + cardFileName + "'></img>");
      }
    }
    if (this.isPick2()) {
      this.showPick2();
    }
    jQuery('.game-status-box').html("Turn " + (gameBoard.turns + 1) + " Score " + (gameBoard.getScore()));
    jQuery('.game-number-box').html("Game# " + gameBoard.gameSeed);
    jQuery('.card').click(this.onCardClick);
    if (this.USE_DRAG_AND_DROP) {
      jQuery('.card').draggable({
        cancel: "a.ui-icon",
        revert: "invalid",
        containment: "document",
        helper: "clone",
        cursor: "move",
        distance: 20
      });
      return jQuery('.card').droppable({
        accept: ".card",
        activeClass: "ui-state-highlight",
        drop: (function(_this) {
          return function(event, ui) {
            var fromId, toId;
            fromId = _this.getIdNumFromIdAttr(ui.draggable);
            toId = _this.getIdNumFromIdAttr(jQuery(event.target));
            return _this.dragCallback(fromId, toId);
          };
        })(this)
      });
    }
  };

  DisplayBoard.prototype.getIdNumFromIdAttr = function(idElem) {
    return parseInt(idElem.attr("id").slice(6));
  };

  DisplayBoard.prototype.registerListeners = function() {
    jQuery(window).resize(this.resizeHandler);
    document.addEventListener("mousemove", this.onMousemove, false);
    document.addEventListener("mousedown", this.onMousedown, false);
    return document.addEventListener("mouseup", this.onMouseup, false);
  };

  DisplayBoard.prototype.onMousemove = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMousedown = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMouseup = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onCardClick = function(event) {
    return this.clickCallback(this.getIdNumFromIdAttr(jQuery(event.target)));
  };

  DisplayBoard.prototype.showPick2 = function() {
    var pickX, pickY;
    pickY = jQuery(this.selectorForPage).height() - 100;
    pickX = jQuery(this.selectorForPage).width();
    jQuery(".click-on-two").css('top', (pickY / 2) + "px");
    jQuery(".click-on-two").css('left', (pickX / 4) + "px");
    jQuery(".click-on-two").css('width', (pickX / 2) + "px");
    return jQuery(".click-on-two").show();
  };

  DisplayBoard.prototype.hidePick2 = function() {
    return jQuery(".click-on-two").hide();
  };

  DisplayBoard.prototype.isPick2 = function() {
    return jQuery(".click-on-two").is(":visible");
  };

  DisplayBoard.prototype.addArrow = function(fromPos, toPos, moveIdx) {
    var dString, lineColour, newArrow, newMarker, newMarkerPath;
    dString = "M" + fromPos.left + "," + fromPos.top + " " + "L" + toPos.left + "," + toPos.top;
    lineColour = moveIdx < this.rainbow.length ? this.rainbow[moveIdx] : "blue";
    newArrow = jQuery(document.createElementNS("http://www.w3.org/2000/svg", "path")).attr({
      d: dString,
      style: "stroke:" + lineColour + "; stroke-width: 3px; fill: none; marker-end: url(#arrow-" + this.arrowBaseIdx + ")"
    });
    jQuery('#arrowOverlay').find("g").append(newArrow);
    newMarker = document.createElementNS("http://www.w3.org/2000/svg", "marker");
    newMarker.setAttribute("id", "arrow-" + this.arrowBaseIdx);
    newMarker.setAttribute("markerWidth", "10");
    newMarker.setAttribute("markerHeight", "10");
    newMarker.setAttribute("refX", "9");
    newMarker.setAttribute("refY", "6");
    newMarker.setAttribute("orient", "auto");
    newMarkerPath = document.createElementNS("http://www.w3.org/2000/svg", "path");
    newMarkerPath.setAttribute("fill", "" + lineColour);
    newMarkerPath.setAttribute("d", "M2,1 L2,10 L10,6 L2,2");
    newMarker.appendChild(newMarkerPath);
    jQuery('#arrowOverlay').find("defs").append(newMarker);
    return this.arrowBaseIdx++;
  };

  DisplayBoard.prototype.clearArrows = function() {
    this.arrowBaseIdx = 0;
    jQuery('#arrowOverlay').find("g").empty();
    return jQuery('.hint-info').css('visibility', 'hidden');
  };

  DisplayBoard.prototype.getSVGAreaSize = function() {
    var arrowArea;
    arrowArea = [jQuery('#gameboard').width(), jQuery('#gameboard').height()];
    jQuery('#arrowOverlay').width(arrowArea[0]);
    jQuery('#arrowOverlay').height(arrowArea[1]);
    return arrowArea;
  };

  DisplayBoard.prototype.showPossibleMoveArrows = function(allPossMoves) {
    var arrowArea, cardHeight, cardWidth, fromCentre, j, len, movesAtLevel, possMove, results, startMove, startMoveIdx, toCentre;
    arrowArea = this.getSVGAreaSize();
    cardWidth = arrowArea[0] / 13;
    cardHeight = arrowArea[1] / 4;
    this.clearArrows();
    results = [];
    for (startMoveIdx = j = 0, len = allPossMoves.length; j < len; startMoveIdx = ++j) {
      startMove = allPossMoves[startMoveIdx];
      results.push((function() {
        var k, len1, results1;
        results1 = [];
        for (k = 0, len1 = startMove.length; k < len1; k++) {
          movesAtLevel = startMove[k];
          results1.push((function() {
            var l, len2, results2;
            results2 = [];
            for (l = 0, len2 = movesAtLevel.length; l < len2; l++) {
              possMove = movesAtLevel[l];
              fromCentre = {
                left: possMove[0][1] * cardWidth + cardWidth / 2,
                top: possMove[0][0] * cardHeight + cardHeight / 2
              };
              toCentre = {
                left: possMove[1][1] * cardWidth + cardWidth / 2,
                top: possMove[1][0] * cardHeight + cardHeight / 2
              };
              results2.push(this.addArrow(fromCentre, toCentre, startMoveIdx));
            }
            return results2;
          }).call(this));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  DisplayBoard.prototype.showMoveSequence = function(moveSequence, bestMoveInfo, fromMoveIdx, isPreview) {
    var arrowArea, cardHeight, cardWidth, fromCentre, j, len, moveIdx, possMove, toCentre;
    arrowArea = this.getSVGAreaSize();
    cardWidth = arrowArea[0] / 13;
    cardHeight = arrowArea[1] / 4;
    this.clearArrows();
    this.createArrowColours(isPreview ? 30 : moveSequence.length);
    for (moveIdx = j = 0, len = moveSequence.length; j < len; moveIdx = ++j) {
      possMove = moveSequence[moveIdx];
      if (moveIdx < fromMoveIdx) {
        continue;
      }
      fromCentre = {
        left: possMove[0][1] * cardWidth + cardWidth / 2,
        top: possMove[0][0] * cardHeight + cardHeight / 2
      };
      toCentre = {
        left: possMove[1][1] * cardWidth + cardWidth / 2,
        top: possMove[1][0] * cardHeight + cardHeight / 2
      };
      this.addArrow(fromCentre, toCentre, moveIdx);
    }
    jQuery('.hint-info-box').html("Best score " + bestMoveInfo);
    return jQuery('.hint-info').css('visibility', 'visible');
  };

  return DisplayBoard;

})();

//# sourceMappingURL=DisplayBoard.js.map
