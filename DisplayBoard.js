// Generated by CoffeeScript 1.6.3
var DisplayBoard,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DisplayBoard = (function() {
  function DisplayBoard(selCellCallback, dragCallback, selCompleteCallback, playingCards, useSvg) {
    this.selCellCallback = selCellCallback;
    this.dragCallback = dragCallback;
    this.selCompleteCallback = selCompleteCallback;
    this.playingCards = playingCards;
    this.useSvg = useSvg;
    this.onMouseup = __bind(this.onMouseup, this);
    this.onMousedown = __bind(this.onMousedown, this);
    this.onMousemove = __bind(this.onMousemove, this);
    this.registerListeners();
  }

  DisplayBoard.prototype.showGameState = function(gameBoard) {
    var board, cardFileName, cardHeight, cardId, cardWidth, displayHeight, displayWidth, row, rowIdx, _i, _len, _results;
    displayWidth = $(window).width() - 50;
    displayHeight = $(window).height();
    cardWidth = displayWidth / gameBoard.numCols;
    cardHeight = cardWidth * 1.545;
    $('.game-board').html("");
    board = gameBoard.getBoard();
    _results = [];
    for (rowIdx = _i = 0, _len = board.length; _i < _len; rowIdx = ++_i) {
      row = board[rowIdx];
      $('.game-board').append("<div class='row' id='row" + rowIdx + "'></div>");
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = row.length; _j < _len1; _j++) {
          cardId = row[_j];
          cardFileName = this.playingCards.getCardFileName(cardId, this.useSvg);
          if (this.useSvg) {
            _results1.push($("#row" + rowIdx).append("<object type='image/svg+xml' id='cardid" + cardId + "' width='50' height='80' data='cards/" + cardFileName + "'></object>"));
          } else {
            _results1.push($("#row" + rowIdx).append("<img id='cardid" + cardId + "' class='card' width='" + cardWidth + "px' height='" + cardHeight + "px' src='cards/" + cardFileName + "'></img>"));
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DisplayBoard.prototype.registerListeners = function() {
    return;
    document.addEventListener("mousemove", this.onMousemove, false);
    document.addEventListener("mousedown", this.onMousedown, false);
    return document.addEventListener("mouseup", this.onMouseup, false);
  };

  DisplayBoard.prototype.onMousemove = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMousedown = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMouseup = function(event) {
    return event.preventDefault();
  };

  return DisplayBoard;

})();
