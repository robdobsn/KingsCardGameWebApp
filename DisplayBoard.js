// Generated by CoffeeScript 1.12.7
var DisplayBoard,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

DisplayBoard = (function() {
  function DisplayBoard(playingCards, dragCallback, clickCallback, resizeHandler, basePath, selectorForPage) {
    this.playingCards = playingCards;
    this.dragCallback = dragCallback;
    this.clickCallback = clickCallback;
    this.resizeHandler = resizeHandler;
    this.basePath = basePath;
    this.selectorForPage = selectorForPage;
    this.onCardClick = bind(this.onCardClick, this);
    this.onMouseup = bind(this.onMouseup, this);
    this.onMousedown = bind(this.onMousedown, this);
    this.onMousemove = bind(this.onMousemove, this);
    this.registerListeners();
    this.USE_DRAG_AND_DROP = false;
  }

  DisplayBoard.prototype.showGameState = function(gameBoard) {
    var cardFileName, cardHeight, cardId, cardWidth, colIdx, displayHeight, displayWidth, i, j, ref, ref1, rowIdx;
    displayWidth = jQuery(this.selectorForPage).width();
    displayHeight = jQuery(this.selectorForPage).height();
    cardWidth = displayWidth / gameBoard.numCols;
    cardHeight = cardWidth * 1.545;
    jQuery('.game-board').html("");
    for (rowIdx = i = 0, ref = gameBoard.numRows - 1; 0 <= ref ? i <= ref : i >= ref; rowIdx = 0 <= ref ? ++i : --i) {
      jQuery('.game-board').append("<div class='row' id='row" + rowIdx + "'></div>");
      for (colIdx = j = 0, ref1 = gameBoard.numCols - 1; 0 <= ref1 ? j <= ref1 : j >= ref1; colIdx = 0 <= ref1 ? ++j : --j) {
        cardId = gameBoard.getCardId(rowIdx, colIdx);
        cardFileName = this.basePath + "cards/" + gameBoard.getCardFileName(rowIdx, colIdx);
        jQuery("#row" + rowIdx).append("<img id='cardid" + cardId + "' class='card' width='" + cardWidth + "px' height='" + cardHeight + "px' src='" + cardFileName + "'></img>");
      }
    }
    jQuery('.game-status-box').html("Turn " + (gameBoard.turns + 1));
    jQuery('.card').click(this.onCardClick);
    if (this.USE_DRAG_AND_DROP) {
      jQuery('.card').draggable({
        cancel: "a.ui-icon",
        revert: "invalid",
        containment: "document",
        helper: "clone",
        cursor: "move",
        distance: 20
      });
      return jQuery('.card').droppable({
        accept: ".card",
        activeClass: "ui-state-highlight",
        drop: (function(_this) {
          return function(event, ui) {
            var fromId, toId;
            fromId = _this.getIdNumFromIdAttr(ui.draggable);
            toId = _this.getIdNumFromIdAttr(jQuery(event.target));
            return _this.dragCallback(fromId, toId);
          };
        })(this)
      });
    }
  };

  DisplayBoard.prototype.getIdNumFromIdAttr = function(idElem) {
    return parseInt(idElem.attr("id").slice(6));
  };

  DisplayBoard.prototype.registerListeners = function() {
    jQuery(window).resize(this.resizeHandler);
    return;
    document.addEventListener("mousemove", this.onMousemove, false);
    document.addEventListener("mousedown", this.onMousedown, false);
    return document.addEventListener("mouseup", this.onMouseup, false);
  };

  DisplayBoard.prototype.onMousemove = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMousedown = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onMouseup = function(event) {
    return event.preventDefault();
  };

  DisplayBoard.prototype.onCardClick = function(event) {
    return this.clickCallback(this.getIdNumFromIdAttr(jQuery(event.target)));
  };

  DisplayBoard.prototype.showPick2 = function() {
    var pickPos;
    pickPos = jQuery(this.selectorForPage).height() + 100;
    console.log("{top:" + (pickPos / 2) + "px}");
    jQuery(".click-on-two").css('top', (-pickPos / 2) + "px");
    return jQuery(".click-on-two").show();
  };

  DisplayBoard.prototype.hidePick2 = function() {
    return jQuery(".click-on-two").hide();
  };

  DisplayBoard.prototype.isPick2 = function() {
    return jQuery(".click-on-two").is(":visible");
  };

  DisplayBoard.prototype.addArrow = function(fromPos, toPos, moveIdx) {
    var dString, lineColour, lineColours, newArrow;
    lineColours = ["aqua", "blue", "brown", "coral", "crimson", "fuchsia", "gold", "hotpink", "magenta", "orangered", "purple", "violet", "yellow"];
    dString = "M" + fromPos.left + "," + fromPos.top + " " + "L" + toPos.left + "," + toPos.top;
    lineColour = moveIdx < lineColours.length ? lineColours[moveIdx] : "blue";
    newArrow = jQuery(document.createElementNS("http://www.w3.org/2000/svg", "path")).attr({
      d: dString,
      style: "stroke:" + lineColour + "; stroke-width: 5px; fill: none; marker-end: url(#arrow-" + lineColour + ")"
    });
    return jQuery('#arrowOverlay').find("g").append(newArrow);
  };

  DisplayBoard.prototype.clearArrows = function() {
    return jQuery('#arrowOverlay').find("g").empty();
  };

  DisplayBoard.prototype.setSVGAreaSize = function() {
    var arrowArea;
    arrowArea = [jQuery('#gameboard').width(), jQuery('#gameboard').height()];
    jQuery('#arrowOverlay').width(arrowArea[0]);
    return jQuery('#arrowOverlay').height(arrowArea[1]);
  };

  DisplayBoard.prototype.showPossibleMoveArrows = function(possMoves) {
    var cardSize, fromCentre, fromId, fromOffs, i, len, moveIdx, possMove, results, toCentre, toId, toOffs;
    this.setSVGAreaSize();
    this.clearArrows();
    results = [];
    for (moveIdx = i = 0, len = possMoves.length; i < len; moveIdx = ++i) {
      possMove = possMoves[moveIdx];
      fromId = "#cardid" + possMove[0];
      toId = "#cardid" + possMove[1];
      fromOffs = jQuery(fromId).offset();
      toOffs = jQuery(toId).offset();
      cardSize = [jQuery(fromId).width(), jQuery(fromId).height()];
      fromCentre = {
        left: fromOffs.left + cardSize[0] / 2,
        top: fromOffs.top + cardSize[1] / 2
      };
      toCentre = {
        left: toOffs.left + cardSize[0] / 2,
        top: toOffs.top + cardSize[1] / 2
      };
      results.push(this.addArrow(fromCentre, toCentre, moveIdx));
    }
    return results;
  };

  return DisplayBoard;

})();

//# sourceMappingURL=DisplayBoard.js.map
