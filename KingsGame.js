// Generated by CoffeeScript 1.10.0
var KingsGame,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

KingsGame = (function() {
  function KingsGame(basePath) {
    this.basePath = basePath;
    this.exitHintMode = bind(this.exitHintMode, this);
    this.playHint = bind(this.playHint, this);
    this.getHint = bind(this.getHint, this);
    this.redoMove = bind(this.redoMove, this);
    this.undoMove = bind(this.undoMove, this);
    this.resizeHandler = bind(this.resizeHandler, this);
    this.nextGamePhase = bind(this.nextGamePhase, this);
    this.dragCellCallback = bind(this.dragCellCallback, this);
    this.clickCallback = bind(this.clickCallback, this);
    this.fixedGamePlus = bind(this.fixedGamePlus, this);
    this.fixedGameMinus = bind(this.fixedGameMinus, this);
    this.fixedRandom = bind(this.fixedRandom, this);
    this.newGame = bind(this.newGame, this);
    this.gameMode = "random";
    this.gameBoard = new GameBoard();
    this.displayBoard = new DisplayBoard(this.dragCellCallback, this.clickCallback, this.resizeHandler, this.basePath, ".game-board");
    this.gameHistory = new GameHistory();
    this.gameSearch = new GameSearch();
    this.exitHintMode();
  }

  KingsGame.prototype.start = function() {
    var btn, fn;
    this.exitHintMode();
    btn = jQuery('.game-button-next');
    fn = btn.button;
    jQuery('.game-button-next').button().click(this.nextGamePhase);
    jQuery('.game-button-undo').button().click(this.undoMove);
    jQuery('.game-button-redo').button().click(this.redoMove);
    jQuery('.game-button-hint').button().click(this.getHint);
    jQuery('.game-button-play-hint').button().click(this.playHint);
    jQuery('.game-button-play-hint').css('visibility', 'hidden');
    jQuery('.game-button-fixed-random').button().click(this.fixedRandom);
    jQuery('.game-button-fixed-minus').button().click(this.fixedGameMinus);
    jQuery('.game-button-fixed-plus').button().click(this.fixedGamePlus);
    jQuery('.game-button-new-game').button().click(this.newGame);
    this.gameBoard.deal();
    this.gameBoard.removeAces();
    this.gameHistory.addToHistory(this.gameBoard);
    return this.playGame();
  };

  KingsGame.prototype.playGame = function() {
    this.exitHintMode();
    this.displayBoard.hidePick2();
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.newGame = function() {
    var gameNumber;
    gameNumber = this.gameBoard.gameSeed;
    this.exitHintMode();
    this.gameBoard = new GameBoard();
    if (this.gameMode === "fixed") {
      this.gameBoard.setFixedSeed(gameNumber);
    }
    this.gameBoard.deal();
    this.gameBoard.removeAces();
    this.gameHistory = new GameHistory();
    this.gameHistory.addToHistory(this.gameBoard);
    return this.playGame();
  };

  KingsGame.prototype.fixedRandom = function() {
    if (this.gameMode === "random") {
      this.gameMode = "fixed";
      jQuery('.game-button-fixed-random span').text("Random");
      jQuery('.game-button-fixed-plus').show();
      jQuery('.game-button-fixed-minus').show();
      this.gameBoard.setFixedSeed(1);
      return this.newGame();
    } else {
      this.gameMode = "random";
      jQuery('.game-button-fixed-random span').text("Fixed");
      jQuery('.game-button-fixed-plus').hide();
      jQuery('.game-button-fixed-minus').hide();
      this.gameBoard.setRandomSeed();
      this.displayBoard.showGameState(this.gameBoard);
      return this.newGame();
    }
  };

  KingsGame.prototype.fixedGameMinus = function() {
    this.gameBoard.decrementSeed();
    return this.newGame();
  };

  KingsGame.prototype.fixedGamePlus = function() {
    this.gameBoard.incrementSeed();
    return this.newGame();
  };

  KingsGame.prototype.clickCallback = function(clickedCardId) {
    var fromCol, fromRow, moveResult, ref, ref1, toCardId, toCol, toRow;
    this.exitHintMode();
    if (this.displayBoard.isPick2()) {
      toCardId = this.gameBoard.getCardId(this.move2ToCell[0], this.move2ToCell[1]);
      ref = this.gameBoard.moveCardIfValid(clickedCardId, toCardId), moveResult = ref[0], fromRow = ref[1], fromCol = ref[2], toRow = ref[3], toCol = ref[4];
      if (moveResult === "ok") {
        this.displayBoard.hidePick2();
        this.displayBoard.showGameState(this.gameBoard);
        this.gameHistory.addToHistory(this.gameBoard);
        return;
      }
    }
    ref1 = this.gameBoard.moveValidCardToEmptyPlace(clickedCardId), moveResult = ref1[0], fromRow = ref1[1], fromCol = ref1[2], toRow = ref1[3], toCol = ref1[4];
    if (moveResult === "ok") {
      this.displayBoard.hidePick2();
      this.displayBoard.showGameState(this.gameBoard);
      this.gameHistory.addToHistory(this.gameBoard);
    } else if (moveResult === "select2") {
      this.displayBoard.showPick2();
      this.move2ToCell = [toRow, toCol];
    }
  };

  KingsGame.prototype.dragCellCallback = function(fromId, toId) {
    var fromCol, fromRow, moveResult, ref, toCol, toRow;
    this.exitHintMode();
    this.displayBoard.hidePick2();
    console.log("Dragged", fromId, toId);
    ref = this.gameBoard.moveCardIfValid(fromId, toId), moveResult = ref[0], fromRow = ref[1], fromCol = ref[2], toRow = ref[3], toCol = ref[4];
    if (moveResult === "ok") {
      this.displayBoard.showGameState(this.gameBoard);
      return this.gameHistory.addToHistory(this.gameBoard);
    }
  };

  KingsGame.prototype.nextGamePhase = function() {
    this.exitHintMode();
    this.displayBoard.hidePick2();
    this.gameBoard.redeal();
    this.displayBoard.showGameState(this.gameBoard);
    this.gameHistory.addToHistory(this.gameBoard);
    return this.displayBoard.clearArrows();
  };

  KingsGame.prototype.resizeHandler = function() {
    var bestMoves;
    this.displayBoard.showGameState(this.gameBoard);
    if (this.hintMoveIdx >= 0) {
      bestMoves = this.gameSearch.getBestMoves();
      return this.displayBoard.showMoveSequence(bestMoves[0], bestMoves[1], this.hintMoveIdx, false);
    }
  };

  KingsGame.prototype.undoMove = function() {
    var bestMoves, prevBoard;
    this.displayBoard.hidePick2();
    prevBoard = this.gameHistory.getPreviousBoard();
    this.gameBoard.copy(prevBoard);
    this.displayBoard.showGameState(this.gameBoard);
    if (this.hintMoveIdx > 0) {
      this.hintMoveIdx--;
      bestMoves = this.gameSearch.getBestMoves();
      return this.displayBoard.showMoveSequence(bestMoves[0], bestMoves[1], this.hintMoveIdx, false);
    } else {
      return this.exitHintMode();
    }
  };

  KingsGame.prototype.redoMove = function() {
    var nextBoard;
    this.exitHintMode();
    this.displayBoard.hidePick2();
    nextBoard = this.gameHistory.getNextBoard();
    this.gameBoard.copy(nextBoard);
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.getHint = function() {
    var bestMoves, i, len, move, ref;
    bestMoves = this.gameSearch.getDynamicTree(this.gameBoard, this.displayBoard);
    console.log("Best score " + bestMoves[1]);
    ref = bestMoves[0];
    for (i = 0, len = ref.length; i < len; i++) {
      move = ref[i];
      console.log("From " + move[0] + " to " + move[1]);
    }
    if (bestMoves[0].length > 0) {
      this.hintMoveIdx = 0;
      jQuery('.game-button-play-hint').css('visibility', 'visible');
      return this.displayBoard.showMoveSequence(bestMoves[0], bestMoves[1], this.hintMoveIdx, false);
    }
  };

  KingsGame.prototype.playHint = function() {
    var bestMoves, fromCol, fromRow, moveResult, moveToPlay, ref, toCol, toRow;
    if (this.hintMoveIdx < 0) {
      return;
    }
    bestMoves = this.gameSearch.getBestMoves();
    moveToPlay = bestMoves[0][this.hintMoveIdx];
    ref = this.gameBoard.moveCardUsingRowAndColInfo(moveToPlay[0], moveToPlay[1]), moveResult = ref[0], fromRow = ref[1], fromCol = ref[2], toRow = ref[3], toCol = ref[4];
    if (moveResult === "ok") {
      this.displayBoard.hidePick2();
      this.displayBoard.showGameState(this.gameBoard);
      this.gameHistory.addToHistory(this.gameBoard);
    }
    this.hintMoveIdx++;
    if (this.hintMoveIdx >= bestMoves[0].length) {
      this.exitHintMode();
      return;
    }
    return this.displayBoard.showMoveSequence(bestMoves[0], bestMoves[1], this.hintMoveIdx, false);
  };

  KingsGame.prototype.exitHintMode = function() {
    this.hintMoveIdx = -1;
    this.displayBoard.clearArrows();
    return jQuery('.game-button-play-hint').css('visibility', 'hidden');
  };

  return KingsGame;

})();

//# sourceMappingURL=KingsGame.js.map
