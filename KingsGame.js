// Generated by CoffeeScript 1.12.7
var KingsGame,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

KingsGame = (function() {
  function KingsGame(basePath) {
    this.basePath = basePath;
    this.hintMove = bind(this.hintMove, this);
    this.redoMove = bind(this.redoMove, this);
    this.undoMove = bind(this.undoMove, this);
    this.resizeHandler = bind(this.resizeHandler, this);
    this.nextGamePhase = bind(this.nextGamePhase, this);
    this.dragCellCallback = bind(this.dragCellCallback, this);
    this.clickCallback = bind(this.clickCallback, this);
    this.playingCards = new PlayingCards();
    this.gameBoard = new GameBoard(this.playingCards);
    this.displayBoard = new DisplayBoard(this.playingCards, this.dragCellCallback, this.clickCallback, this.resizeHandler, this.basePath, ".game-board");
    this.gameHistory = new GameHistory();
    this.gameSearch = new GameSearch();
  }

  KingsGame.prototype.start = function() {
    var btn, fn;
    btn = jQuery('.game-button-next');
    fn = btn.button;
    jQuery('.game-button-next').button().click(this.nextGamePhase);
    jQuery('.game-button-undo').button().click(this.undoMove);
    jQuery('.game-button-redo').button().click(this.redoMove);
    jQuery('.game-button-hint').button().click(this.hintMove);
    this.gameBoard.deal();
    this.gameBoard.removeAces();
    this.gameHistory.addToHistory(this.gameBoard);
    return this.playGame();
  };

  KingsGame.prototype.playGame = function() {
    console.log("Playing Kings");
    this.displayBoard.hidePick2();
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.clickCallback = function(clickedCardId) {
    var fromCol, fromRow, moveResult, ref, ref1, toCardId, toCol, toRow;
    if (this.displayBoard.isPick2()) {
      toCardId = this.gameBoard.getCardId(this.move2ToCell[0], this.move2ToCell[1]);
      ref = this.gameBoard.moveCardIfValid(clickedCardId, toCardId), moveResult = ref[0], fromRow = ref[1], fromCol = ref[2], toRow = ref[3], toCol = ref[4];
      if (moveResult === "ok") {
        this.displayBoard.showGameState(this.gameBoard);
        this.gameHistory.addToHistory(this.gameBoard);
        this.displayBoard.hidePick2();
        return;
      }
    }
    ref1 = this.gameBoard.moveValidCardToEmptyPlace(clickedCardId), moveResult = ref1[0], fromRow = ref1[1], fromCol = ref1[2], toRow = ref1[3], toCol = ref1[4];
    if (moveResult === "ok") {
      this.displayBoard.showGameState(this.gameBoard);
      this.gameHistory.addToHistory(this.gameBoard);
      this.displayBoard.hidePick2();
    } else if (moveResult === "select2") {
      this.displayBoard.showPick2();
      this.move2ToCell = [toRow, toCol];
    }
  };

  KingsGame.prototype.dragCellCallback = function(fromId, toId) {
    var fromCol, fromRow, moveResult, ref, toCol, toRow;
    this.displayBoard.hidePick2();
    console.log("Dragged", fromId, toId);
    ref = this.gameBoard.moveCardIfValid(fromId, toId), moveResult = ref[0], fromRow = ref[1], fromCol = ref[2], toRow = ref[3], toCol = ref[4];
    if (moveResult === "ok") {
      this.displayBoard.showGameState(this.gameBoard);
      return this.gameHistory.addToHistory(this.gameBoard);
    }
  };

  KingsGame.prototype.nextGamePhase = function() {
    this.displayBoard.hidePick2();
    this.gameBoard.redeal();
    this.displayBoard.showGameState(this.gameBoard);
    return this.gameHistory.addToHistory(this.gameBoard);
  };

  KingsGame.prototype.resizeHandler = function() {
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.undoMove = function() {
    var prevBoard;
    this.displayBoard.hidePick2();
    prevBoard = this.gameHistory.getPreviousBoard();
    this.gameBoard.copy(prevBoard);
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.redoMove = function() {
    var nextBoard;
    this.displayBoard.hidePick2();
    nextBoard = this.gameHistory.getNextBoard();
    this.gameBoard.copy(nextBoard);
    return this.displayBoard.showGameState(this.gameBoard);
  };

  KingsGame.prototype.hintMove = function() {
    var possMoves;
    console.log("Hint");
    possMoves = this.gameSearch.getPossibleMoves(this.gameBoard);
    return this.displayBoard.showPossibleMoveArrows(possMoves);
  };

  return KingsGame;

})();

//# sourceMappingURL=KingsGame.js.map
