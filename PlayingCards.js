// Generated by CoffeeScript 1.12.7
var PlayingCards;

PlayingCards = (function() {
  PlayingCards.cardsInDeck = 52;

  PlayingCards.cardsInSuit = 13;

  PlayingCards.suitNames = ['club', 'diamond', 'heart', 'spade'];

  PlayingCards.shortSuitNames = ['C', 'D', 'H', 'S'];

  PlayingCards.rankNames = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];

  PlayingCards.shortRankNames = ['A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K'];

  PlayingCards.AceId = 0;

  PlayingCards.TwoId = 1;

  PlayingCards.KingId = 12;

  PlayingCards.prototype.dealNextIdx = 0;

  PlayingCards.prototype.deck = [];

  function PlayingCards(create, shuffle) {
    if (create == null) {
      create = true;
    }
    if (shuffle == null) {
      shuffle = true;
    }
    if (create) {
      this.createUnsorted();
    }
    if (shuffle) {
      this.shuffle();
    }
  }

  PlayingCards.prototype.empty = function() {
    return this.deck = [];
  };

  PlayingCards.prototype.createUnsorted = function() {
    var k, ref, results;
    return this.deck = (function() {
      results = [];
      for (var k = 0, ref = PlayingCards.cardsInDeck - 1; 0 <= ref ? k <= ref : k >= ref; 0 <= ref ? k++ : k--){ results.push(k); }
      return results;
    }).apply(this);
  };

  PlayingCards.prototype.addCard = function(cardId) {
    return this.deck.push(cardId);
  };

  PlayingCards.prototype.shuffle = function(randomSeed) {
    var i, j, k, pseudoRandom, ref, ref1;
    if (randomSeed == null) {
      randomSeed = 0;
    }
    pseudoRandom = new PseudoRandom(randomSeed);
    for (i = k = ref = this.deck.length - 1; ref <= 1 ? k <= 1 : k >= 1; i = ref <= 1 ? ++k : --k) {
      j = Math.floor(pseudoRandom.nextFloat() * (i + 1));
      ref1 = [this.deck[j], this.deck[i]], this.deck[i] = ref1[0], this.deck[j] = ref1[1];
    }
    return true;
  };

  PlayingCards.prototype.startDeal = function() {
    return this.dealNextIdx = 0;
  };

  PlayingCards.prototype.dealNextCard = function() {
    var card;
    card = this.deck[this.dealNextIdx];
    this.dealNextIdx += 1;
    this.dealNextIdx = this.dealNextIdx % this.deck.length;
    return card;
  };

  PlayingCards.getPseudoRandomSeed = function() {
    return PseudoRandom.getRandomSeed();
  };

  PlayingCards.maxSeed = function() {
    return PseudoRandom.getMaxSeed();
  };

  PlayingCards.getCardIdBySuitAndRank = function(suitIdx, rankIdx) {
    return suitIdx * PlayingCards.cardsInSuit + rankIdx;
  };

  PlayingCards.getCardRank = function(cardId) {
    return cardId % PlayingCards.cardsInSuit;
  };

  PlayingCards.getCardSuit = function(cardId) {
    return Math.floor(cardId / PlayingCards.cardsInSuit);
  };

  PlayingCards.isAce = function(cardId) {
    return (cardId % PlayingCards.cardsInSuit) === PlayingCards.AceId;
  };

  PlayingCards.getCardInfo = function(cardId) {
    var cardInfo, rankIdx, suitIdx, suitName;
    if (cardId > PlayingCards.cardsInDeck - 1) {
      debugger;
    }
    suitIdx = Math.floor(cardId / PlayingCards.cardsInSuit);
    if (suitIdx < 0 || suitIdx >= PlayingCards.suitNames.length) {
      debugger;
    }
    suitName = PlayingCards.suitNames[suitIdx];
    rankIdx = cardId % PlayingCards.cardsInSuit;
    cardInfo = {
      suitIdx: suitIdx,
      suitName: suitName,
      rankIdx: rankIdx,
      rankName: PlayingCards.rankNames[rankIdx],
      cardFileNamePng: "card_" + (rankIdx + 1) + "_" + suitName + ".png",
      cardShortName: PlayingCards.shortSuitNames[suitIdx] + PlayingCards.shortRankNames[rankIdx]
    };
    return cardInfo;
  };

  PlayingCards.getCardFileName = function(cardId) {
    return this.getCardInfo(cardId).cardFileNamePng;
  };

  PlayingCards.findPrevCardInSameSuit = function(cardId) {
    if (this.getCardRank(cardId) === PlayingCards.AceId) {
      return -1;
    }
    return cardId - 1;
  };

  PlayingCards.findNextCardInSameSuit = function(cardId) {
    if (this.getCardRank(cardId) === PlayingCards.KingId) {
      return -1;
    }
    return cardId + 1;
  };

  return PlayingCards;

})();

//# sourceMappingURL=PlayingCards.js.map
